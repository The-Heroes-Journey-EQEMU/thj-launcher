name: Build and Package THJInstaller

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Find .csproj File
        id: find_csproj
        shell: pwsh
        run: |
          $csprojPath = Get-ChildItem -Path . -Recurse -Filter "THJPatcher.csproj" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $csprojPath) { throw "THJPatcher.csproj not found!" }
          echo "CSPROJ_PATH=$csprojPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Found .csproj at: $csprojPath"

      - name: Extract Version from .csproj
        id: get_version
        shell: pwsh
        run: |
          [xml]$csproj = Get-Content $env:CSPROJ_PATH
          $version = $csproj.Project.PropertyGroup.Version
          if (-not $version) { $version = "1.0.0" }
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Extracted Version: $version"

      - name: Restore dependencies
        run: dotnet restore ${{ env.CSPROJ_PATH }}

      - name: Build the Installer
        run: |
          dotnet publish ${{ env.CSPROJ_PATH }} -c Release -r win-x64 --self-contained false -o output

      - name: List output directory contents
        run: |
          Get-ChildItem -Path output\* -Recurse
        shell: pwsh

      - name: Create ZIP
        run: |
          Compress-Archive -Path output\* -DestinationPath "THJInstaller-${{ env.VERSION }}.zip" -Force
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: THJInstaller-${{ env.VERSION }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
